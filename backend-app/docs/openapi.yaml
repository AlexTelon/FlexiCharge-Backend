openapi: 3.0.0
info:
  title: FlexiCharge API
  version: 1.0.0
servers:
  - url: http://localhost:8080/
    description: Development Environment
  - url: http://18.202.253.30:8080/
    description: Production Environment (AWS)
paths:
  /auth/sign-in:
    post:
      tags:
        - User
      summary: Sign-in
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: username
                password: password
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example:
                  accessToken: accesToken
                  email: email
                  username: username
                  user_id: user_id
        '400':
          description: Incorrect username or password
          content:
            application/json:
              schema:
                type: object
                example:
                  message: message
                  code: NotAuthorizedException
                  time: time
                  requestId: requestId
                  statusCode: 400
                  retryable: false
                  retryDelay: 4.128536351395207
  /auth/user-information:
    put:
      tags:
        - User
      summary: Update information
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                firstName: string
                lastName: string
                phoneNumber: string
                streetAddress: string
                zipCode: string
                city: string
                country: string
      responses:
        '204':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example:
        '400':
          description: Incorrect username or password
          content:
            application/json:
              schema:
                type: object
                example:
    get:
      tags:
        - User
      summary: Get user information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example:
                  username: email
                  firstName: firstName
                  lastName: lastName
                  phoneNumber: phoneNumber
                  streetAdress: streetAddress
                  zipCode: zipCode
                  city: city
                  country: country
        '400':
          description: Bad request
  /auth/sign-up:
    post:
      tags:
        - User
      summary: Sign-up
      description: >-
        Creates a new user. Sends a verification code in a email to the supplied
        email address. Use this verification code with the "Verify user"
        request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: mustBeEmail
                password: password
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '400':
          description: Username not email
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Username should be an email
                  code: InvalidParameterException
                  statusCode: 400
  /auth/verify:
    post:
      tags:
        - User
      summary: Verify user
      description: Verifies a new user account with a verification code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: username
                code: verification_code
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/confirm-forgot-password:
    post:
      tags:
        - User
      summary: Confirm forgot password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: rest-api-user
                password: '{{rest-api-account-password}}'
                confirmationCode: email_code
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/forgot-password/{username}:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    post:
      tags:
        - User
      summary: Forgot password
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/users/{username}:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    delete:
      tags:
        - Admin
      summary: Delete a user
      security:
        - bearerAuth: [] # admin
      responses:
        '200':
          description: Successful responese
          content:
            application/json: {}
        '400':
          description: Error message
        '500':
          description: Internal server error
      description: Deletes a user based on username
    put:
      tags:
        - Admin
      summary: Update user attributes
      security:
        - bearerAuth: [] # admin
      #requestBody:
        #content:
          #application/json:
            #schema:
              #$ref: '#/components/schemas/UserAttributes' # Add schema!
      responses:
        '204':
          description: Successful response
        '400':
          description: Error message
        '500':
          description: Internal server error
      description: Updates a users attributes
  /admin/users/{username}/enable:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    put:
      tags:
        - Admin
      summary: Enable user
      security:
        - bearerAuth: [] # admin
      responses:
        '200':
          description: Successful response
        '400':
          description: Error message
        '500':
          description: Internal server error
  /admin/users/{username}/disable:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    put:
      tags:
        - Admin
      summary: Disable user
      security:
        - bearerAuth: [] # admin
      responses:
        '200':
          description: Successful response
        '400':
          description: Error message
        '500':
          description: Internal server error
  /admin/sign-in:
    post:
      tags:
        - Admin
      summary: Sign in with an administrator account.
      description: >-
        Sign in as an administrator. Account is created by someone
        with administrator priveleges.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: rest-api-admin
                password: '{{rest-api-account-password}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '400':
          description: 'A bad request was sent.
            This includes an incorrect username/password.
            **Future improvement**: *Send other 4xx codes, such as 401 for
            bad username/password.*'
  /admin/{username}:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    get:
      tags:
        - Admin
      summary: Get user information by username
      security:
        - bearerAuth: [] # admin
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example:
                  username: email
                  firstName: firstName
                  lastName: lastName
                  phoneNumber: phoneNumber
                  streetAdress: streetAddress
                  zipCode: zipCode
                  city: city
                  country: country
                  userId: userId
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users with information
      security:
        - bearerAuth: [] # admin
      responses:
        '200':
          description: List with all users
          content:
            application/json:
              schema:
                type: object
                example:
                  username: email
                  firstName: firstName
                  lastName: lastName
                  phoneNumber: phoneNumber
                  streetAdress: streetAddress
                  zipCode: zipCode
                  city: city
                  country: country
                  userId: userId
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /admin:
    post:
      tags:
        - Admin
      summary: Creates an admin account.
      description: 'Creates a new admin user. Sends a verification code
        in a email to the supplied email address.
        Use this verification code with the "Verify user" request.'
      security:
        - bearerAuth: [] # admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: rest-api-admin
                password: zi6YrmpWZLQG^5
                email: lela19so@student.ju.se
                name: first_name
                family_name: last_name
      responses:
        '200':
          description: 'Successful response.'
          content:
            application/json: {}
        '401':
          description: 'Error: Unauthorized.
            The supplied POST was correctly formatted but not accepted.'
          content:
            application/json: {}
  /admin/force-change-password:
    post:
      tags:
        - Admin
      summary: Change a users password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: rest-api-admin
                password: zi6YrmpWZLQG^5
                session: >-
                  AYABeAvR1_coVz0EnKxmyNJPM94AHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb2xzAAEAB2F3cy1rbXMAS2Fybjphd3M6a21zOmV1LXdlc3QtMTo0NTU0NTg0OTMwODE6a2V5L2FiN2U3M2UzLWU2NDEtNDk5Zi1iNzc0LWZkZmM1MWM3NzFhYQC4AQIBAHigzwqzlp0D8sA0ltw8SHdsZPaJakxa-4NzPukgGo7dmgGS5dTNK8uczcSpkcC_8tHoAAAAfjB8BgkqhkiG9w0BBwagbzBtAgEAMGgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMSrBLX5nHC2z4cD9YAgEQgDs-mx5U_LlqzlXumqd9MH-drBQ4Vy3dpGqvmRcuBQEFHaSahxhSUgj863fmUSNdpS4Jhq1t8jqPaNQdKAIAAAAADAAAEAAAAAAAAAAAAAAAAADnU04jgSqDAu5p8cfXlAus_____wAAAAEAAAAAAAAAAAAAAAEAAAC_y-lSQjfe6npxGWXg7eDvHCLxEA-1CQ2mTYPYQu4d_WHo8ubIgy1k5l_6ON_PkuQoJn11jNma2IBsK5ZQZJ-VDV3tn6lTxLvA-U2xxhDhgZi8ZrhZMSf-FSYVRHmgV45pDNx9kps1i436i6oUeWI4bbDBaOWLdhWG1KQJGPNv2ZJSWFvlxSYnCHaO-snLXvnSotjxR5XR4tr58HBII1U14fT6LGm6dM5EKOMtZh97P4Y1K6zJuIIGF9pRvZDyWrpx9HY74aW5qXDzePGCQzj7
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response.
          content:
            application/json: {}
        '400':
          description: The request to change the user password was unsuccessfull.
          content:
            application/json: {}
  /chargers/available:
    get:
      tags:
        - Chargers
      summary: Available chargers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Charger'
        '404':
          description: Error message
  /chargers/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    get:
      tags:
        - Chargers
      summary: Charger by id
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charger'
        '404':
          description: Error message
        '500':
          description: Error message
    delete:
      tags:
        - Chargers
      summary: Remove charger by id
      security:
        - bearerAuth: [] # admin
      responses:
        '204':
          description: Successful response
          content:
            application/json: {}
        '404':
          description: Error message
        '500':
          description: Error message
    put:
      tags:
        - Chargers
      summary: Update charger by id
      security:
        - bearerAuth: [] # admin
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '400':
          description: Error message
  /chargers/serial/{serial}:
    parameters:
      - in: path
        name: serial
        schema:
          type: string
        required: true
    get:
      tags:
        - Chargers
      summary: Charger by serial number
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charger'
        '404':
          description: Error message
  /chargers:
    post:
      tags:
        - Chargers
      summary: Chargers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                chargerPointNumber: 23
                location:
                  - 57.777714
                  - 14.16301
                serialNumber: android
      security:
        - bearerAuth: [] # admin
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '404':
          description: Error message
    get:
      tags:
        - Chargers
      summary: Chargers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Charger'
        '404':
          description: Error message
  /transactions/{transactionId}:
    parameters:
      - in: path
        name: transactionId
        schema:
          type: string
        required: true
    get:
      tags:
        - Transactions
      summary: Transaction
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /transactions:
    post:
      tags:
        - Transactions
      summary: Transaction
      description: |-
        userID = string,

        chargerID = int

        isKlarnaPayment = bool

        pricePerKwh = string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userID: '1'
                chargerID: 100001
                isKlarnaPayment: true
                pricePerKwh: '333'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /transactions/chargingStatus/{transactionId}:
    parameters:
      - in: path
        name: transactionId
        schema:
          type: string
        required: true
    put:
      tags:
        - Transactions
      summary: Update transaction status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                kwhTransfered: 1
                currentChargePercentage: 1
      responses:
        '201':
          description: Successful response
          content:
            application/json: {}
        '404':
          description: Error message
        '500':
          description: Error message
  /transactions/session:
    post:
      tags:
        - Transactions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userID: 1
                chargerID: 1
      responses:
        '201':
          description: Successful response
          content:
            application/json: {}
        '400':
          description: Error message
        '500':
          description: Error message
  /transactions/userTransactions/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
    get:
      tags:
        - Transactions
      summary: Transaction by userId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /transactions/chargerTransactions/{chargerId}:
    parameters:
      - in: path
        name: chargerId
        schema:
          type: string
        required: true
    get:
      tags:
        - Transactions
      summary: Transaction by transactions
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /transactions/payment/{transactionId}:
    parameters:
      - in: path
        name: transactionId
        schema:
          type: string
        required: true
    put:
      tags:
        - Transactions
      summary: Update payment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                transactionId: '1'
                paymentId: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /transactions/stop/{transactionId}:
    parameters:
      - in: path
        name: transactionId
        schema:
          type: string
        required: true
    put:
      tags:
        - Transactions
      summary: Stop
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /transactions/start/{transactionId}:
    parameters:
      - in: path
        name: transactionId
        schema:
          type: string
        required: true
    put:
      tags:
        - Transactions
      summary: Start
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /reservations/{reservationId}:
    parameters:
      - in: path
        name: reservationId
        schema:
          type: string
        required: true
    get:
      deprecated: true
      tags:
        - Reservations (deprecated)
      summary: Reservation by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      deprecated: true
      tags:
        - Reservations (deprecated)
      summary: Update Reservation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                chargerId: 1
                connectorId: 1
                idTag: 1
                reservationId: 1
                parentIdTag: 1
      responses:
        '200':
          description: Successful response.
          content:
            application/json: {}
    delete:
      deprecated: true
      tags:
        - Reservations (deprecated)
      summary: Remove reservation
      responses:
        '204':
          description: Successful response.
          content:
            application/json: {}
        '404':
          description: Error message
        '500':
          description: Error message
  /reservations/userReservation/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
    get:
      deprecated: true
      tags:
        - Reservations (deprecated)
      summary: Reservation by userId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /reservations:
    post:
      deprecated: true
      tags:
        - Reservations (deprecated)
      summary: Reservation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                chargerID: 1
                userID: 5
                start: 200
                end: 300
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /reservations/chargerReservation/{chargerId}:
    parameters:
      - in: path
        name: chargerId
        schema:
          type: string
        required: true
    get:
      deprecated: true
      tags:
        - Reservations (deprecated)
      summary: Reservation by chargerId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /invoices:
    post:
      tags:
        - Invoices
      summary: Create invoice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userID: 1
                dateStart: 1
                dateEnd: 1
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Successful response
          content:
            application/json: {}
  /invoices/{invoiceId}:
    parameters:
      - in: path
        name: invoiceId
        schema:
          type: string
        required: true
    get:
      tags:
        - Invoices
      summary: Get invoice by ID.
      description: >-
        Will get the invoice requested by the parameter {invoiceID}.
        Currently there is only one particular PDF being and it
        belongs to Nisse Hult.


        **NOTE**: Using the "Execute" function in swagger is weird.
        Instead try this with "{baseuri:8080}/invoices/1234"


        *Future improvements*:

          1. Check that the user of this endpoint is authorized to look
          at the invoice. User X should not be able to read the invoice
          of user Y, but currently no verification is done.

          2. Code actually gets data from the database.
      parameters:
        - in: path
          name: invoiceID
          schema:
            type: integer
          required: true
          description: Numeric ID of the invoice to get.
      responses:
        '200':
          description: Successful response.
          content:
            application/pdf: {}
        '404':
          description: Invoice not found
          content:
            application/json: {}
  /invoices/users:
    get:
      security:
        - bearerAuth: []
      tags:
        - Invoices
      summary: Get a list of all users invoices
      description: Admin route to fetch all users invoices
      parameters:
        - in: query
          name: status
          schema:
            type: string
          required: false
          description: Filter invoices after status; paid, unpaid or all
        - in: query
          name: date
          schema:
            type: string
          required: false
          description: Filter invoices after date, format YYYY-MM
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '400':
          description: Bad request
          content:
            application/json: {}
        '401':
          description: Unauthorized
          content:
            application/json: {}
  /invoices/users/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
    get:
      security:
        - bearerAuth: []
      tags:
        - Invoices
      summary: Get a list of invoices for a specific user
      description: Admin or the user to whom the invoices belongs to are authorized
      parameters:
        - in: path
          name: userID
          schema:
            type: string
          required: true
        - in: query
          name: status
          schema:
            type: string
          required: false
          description: Filter invoices after status; paid, unpaid or all
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '400':
          description: Bad request
          content:
            application/json: {}
        '401':
          description: Unauthorized
          content:
            application/json: {}
  /chargePoints:
    get:
      tags:
        - ChargePoints
      summary: Gets a list of all charge points
      responses:
        '200':
          description: Sucessful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChargePoint'
        '404':
          description: Not found
        '500':
          description: Internal server error
    post:
      tags:
        - ChargePoints
      summary: Crate a new charge point
      security:
        - bearerAuth: [] # admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: name
                location: [10, 10]
                price: 10
                klarnaReservationAmount: 10
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChargePoint'
        '400':
          description: Error message
        '500':
          description: Internal server error
  /chargePoints/{chargePointId}:
    parameters:
      - in: path
        name: chargePointId
        schema:
          type: number
        required: true
    get:
      tags:
        - ChargePoints
      summary: Gets a charging station based on idTag
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePoint'
        '404':
          description: Not found
        '500':
          description: Internal server error
    put:
      tags:
        - ChargePoints
      summary: Update a charge point
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: name
                location: [10, 10]
                price: 10
      security:
        - bearerAuth: [] # admin
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePoint'
        '400':
          description: Error message
        '404':
          description: Not found
        '500':
          description: Internal server error
    delete:
      tags:
        - ChargePoints
      summary: Delete charge point
      security:
        - bearerAuth: [] # admin
      responses:
        '204':
          description: Successful response
        '404':
          description: Not found
        '500':
          description: Internal server error
components:
  schemas:
    Charger:
      type: object
      properties:
        chargerID:
          type: integer
          format: int64
          example: 100011
        location:
          type: array
          items:
            type: number
          example:
            - 57.777714
            - 14.16301
        serialNumber:
          type: string
          example: 'testnumber15'
        chargePointID:
          type: integer
          format: int64
          example: 24
        status:
          type: string
          description: Charger status
          example: Available
          enum:
            - Available
            - Reserved
      xml:
        name: charger
    ChargePoint:
      type: object
      properties:
        chargePointID:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: name
        location:
          type: array
          items:
            type: number
          example:
            - 57.777714
            - 14.16301
        price:
          type: string
          example: 20
        klarnaReservationAmount:
          type: number
          example: 400
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
