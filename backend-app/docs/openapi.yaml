openapi: 3.0.0
info:
  title: FlexiCharge API
  version: 1.0.0
servers:
  - url: http://localhost:8080/
    description: Development Environment
  - url: http://18.202.253.30:8080/
    description: Production Environment (AWS)
paths:
  /auth/sign-in:
    post:
      tags:
        - User
      summary: Sign-in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username
                password:
                  type: string
                  example: password
      responses:
        "200":
          description: "**Successful response**"
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: accessToken
                  email:
                    type: string
                    example: someone@example.com
                  username:
                    type: string
                    example: someone
                  user_id:
                    type: string
                    example: someone123
        "400":
          description: "**Incorrect username or password**"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect username or password.
                  code:
                    type: string
                    example: NotAuthorizedException
                  time:
                    type: string
                    format: date-time
                    example: "2023-10-09T14:02:30.866Z"
                  statusCode:
                    type: integer
                    format: int64
                    example: 400
                  retryable:
                    type: boolean
                    example: false
                  retryDelay:
                    type: number
                    example: 79.39423282163179
  /auth/user-information:
    put:
      tags:
        - User
      summary: Update information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        "204":
          description: "**Successful response**"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    get:
      tags:
        - User
      summary: Get user information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalError"
  /auth/sign-up:
    post:
      tags:
        - User
      summary: Sign-up
      description: >-
        Creates a new user. Sends a verification code in a email to the supplied
        email address. Use this verification code with the "Verify user"
        request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: someone@example.com
                password:
                  type: string
                  example: password
      responses:
        "200":
          description: "**Successful response**"
        "400":
          description: "**Bad request**"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username should be an email
                  code:
                    type: string
                    example: InvalidParameterException
                  statusCode:
                    type: integer
                    format: int64
                    example: 400
  /auth/verify:
    post:
      tags:
        - User
      summary: Verify user
      description: Verifies a new user account with a verification code that is sent to the email specified during sign up.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "someone@example.com"
                code:
                  type: integer
                  format: int64
                  example: 55555
      responses:
        "200":
          description: "**Successful response**"
        "400":
          $ref: "#/components/responses/BadRequest"
  /auth/confirm-forgot-password:
    post:
      tags:
        - User
      summary: Confirm forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                username:
                  type: string
                  example: "someone@example.com"
                password:
                  type: string
                  example: "{{rest-api-account-password}}"
                confirmationCode:
                  type: string
                  example: "email_code"
      responses:
        "200":
          description: "**Successful response**"
        "400":
          $ref: "#/components/responses/BadRequest"
  /auth/forgot-password/{username}:
    post:
      tags:
        - User
      summary: Forgot password
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "**Successful response**"
        "400":
          $ref: "#/components/responses/BadRequest"

  /admin/users/{username}:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    delete:
      tags:
        - Admin
      summary: Delete a user
      security:
        - bearerAuth: [] # admin
      responses:
        "200":
          description: Successful responese
          content:
            application/json: {}
        "400":
          description: Error message
        "500":
          description: Internal server error
      description: Deletes a user based on username
    put:
      tags:
        - Admin
      summary: Update user attributes
      security:
        - bearerAuth: [] # admin
      #requestBody:
      #content:
      #application/json:
      #schema:
      #$ref: '#/components/schemas/UserAttributes' # Add schema!
      responses:
        "204":
          description: Successful response
        "400":
          description: Error message
        "500":
          description: Internal server error
      description: Updates a users attributes
  /admin/users/{username}/enable:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    put:
      tags:
        - Admin
      summary: Enable user
      security:
        - bearerAuth: [] # admin
      responses:
        "200":
          description: Successful response
        "400":
          description: Error message
        "500":
          description: Internal server error
  /admin/users/{username}/disable:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    put:
      tags:
        - Admin
      summary: Disable user
      security:
        - bearerAuth: [] # admin
      responses:
        "200":
          description: Successful response
        "400":
          description: Error message
        "500":
          description: Internal server error
  /admin/sign-in:
    post:
      tags:
        - Admin
      summary: Sign in with an administrator account.
      description: >-
        Sign in as an administrator. Account is created by someone
        with administrator priveleges.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: rest-api-admin
                password: "{{rest-api-account-password}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
        "400":
          description: "A bad request was sent.
            This includes an incorrect username/password.
            **Future improvement**: *Send other 4xx codes, such as 401 for
            bad username/password.*"
  /admin/{username}:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
    get:
      tags:
        - Admin
      summary: Get user information by username
      security:
        - bearerAuth: [] # admin
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                example:
                  username: email
                  firstName: firstName
                  lastName: lastName
                  phoneNumber: phoneNumber
                  streetAdress: streetAddress
                  zipCode: zipCode
                  city: city
                  country: country
                  userID: userID
        "400":
          description: Bad request
        "401":
          description: Unauthorized
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users with information
      security:
        - bearerAuth: [] # admin
      responses:
        "200":
          description: List with all users
          content:
            application/json:
              schema:
                type: object
                example:
                  username: email
                  firstName: firstName
                  lastName: lastName
                  phoneNumber: phoneNumber
                  streetAdress: streetAddress
                  zipCode: zipCode
                  city: city
                  country: country
                  userID: userID
        "400":
          description: Bad request
        "401":
          description: Unauthorized
  /admin:
    post:
      tags:
        - Admin
      summary: Creates an admin account.
      description: 'Creates a new admin user. Sends a verification code
        in a email to the supplied email address.
        Use this verification code with the "Verify user" request.'
      security:
        - bearerAuth: [] # admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: rest-api-admin
                password: zi6YrmpWZLQG^5
                email: lela19so@student.ju.se
                name: first_name
                family_name: last_name
      responses:
        "200":
          description: "Successful response."
          content:
            application/json: {}
        "401":
          description: "Error: Unauthorized.
            The supplied POST was correctly formatted but not accepted."
          content:
            application/json: {}
  /admin/force-change-password:
    post:
      tags:
        - Admin
      summary: Change a users password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: rest-api-admin
                password: zi6YrmpWZLQG^5
                session: >-
                  AYABeAvR1_coVz0EnKxmyNJPM94AHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb2xzAAEAB2F3cy1rbXMAS2Fybjphd3M6a21zOmV1LXdlc3QtMTo0NTU0NTg0OTMwODE6a2V5L2FiN2U3M2UzLWU2NDEtNDk5Zi1iNzc0LWZkZmM1MWM3NzFhYQC4AQIBAHigzwqzlp0D8sA0ltw8SHdsZPaJakxa-4NzPukgGo7dmgGS5dTNK8uczcSpkcC_8tHoAAAAfjB8BgkqhkiG9w0BBwagbzBtAgEAMGgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMSrBLX5nHC2z4cD9YAgEQgDs-mx5U_LlqzlXumqd9MH-drBQ4Vy3dpGqvmRcuBQEFHaSahxhSUgj863fmUSNdpS4Jhq1t8jqPaNQdKAIAAAAADAAAEAAAAAAAAAAAAAAAAADnU04jgSqDAu5p8cfXlAus_____wAAAAEAAAAAAAAAAAAAAAEAAAC_y-lSQjfe6npxGWXg7eDvHCLxEA-1CQ2mTYPYQu4d_WHo8ubIgy1k5l_6ON_PkuQoJn11jNma2IBsK5ZQZJ-VDV3tn6lTxLvA-U2xxhDhgZi8ZrhZMSf-FSYVRHmgV45pDNx9kps1i436i6oUeWI4bbDBaOWLdhWG1KQJGPNv2ZJSWFvlxSYnCHaO-snLXvnSotjxR5XR4tr58HBII1U14fT6LGm6dM5EKOMtZh97P4Y1K6zJuIIGF9pRvZDyWrpx9HY74aW5qXDzePGCQzj7
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response.
          content:
            application/json: {}
        "400":
          description: The request to change the user password was unsuccessfull.
          content:
            application/json: {}
  /chargers/available:
    get:
      tags:
        - Chargers
      summary: Available chargers
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Charger"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /chargers/{id}:
    get:
      tags:
        - Chargers
      summary: Charger by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Charger"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    delete:
      tags:
        - Chargers
      summary: Remove charger by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "**Successful response**"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalError"
    put:
      tags:
        - Chargers
      summary: Update charger by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newStatus:
                  type: string
                  description: Charger status
                  example: Available
                  enum:
                    - Available
                    - Reserved
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "**Successful response**"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Charger"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /chargers/serial/{serial}:
    parameters:
      - in: path
        name: serial
        schema:
          type: string
        required: true
    get:
      tags:
        - Chargers
      summary: Charger by serial number
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Charger"
        "500":
          $ref: "#/components/responses/InternalError"
  /chargers:
    post:
      tags:
        - Chargers
      summary: Chargers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chargerPointNumber:
                  type: integer
                  format: int64
                  example: 23
                location:
                  type: array
                  items:
                    type: number
                  example:
                    - 57.777714
                    - 14.16301
                serialNumber:
                  type: string
                  example: android
      security:
        - bearerAuth: []
      responses:
        "201":
          description: "**Successful response**"
          content:
            application/json:
              schema:
                type: object
                properties:
                  connectorID:
                    type: integer
                    format: int64
                    example: 23
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    get:
      tags:
        - Chargers
      summary: Chargers
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Charger"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /transactions:
    post:
      tags:
        - Transactions
      summary: Create a transaction
      description: |-
        Creates a transaction that can be started using the `transactionID` returned
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorID:
                  type: integer
                  example: 100000
                isKlarnaPayment:
                  type: boolean
                  example: true
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Error message
        "500":
          description: Error message
  /transactions/start/{transactionID}:
    parameters:
      - in: path
        name: transactionID
        schema:
          type: integer
          example: 100000
        required: true
    put:
      tags:
        - Transactions
      summary: Start a transaction
      description: |-
        Starts a transaction
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Error message
        "500":
          description: Error message
  /transactions/{transactionID}:
    parameters:
      - in: path
        name: transactionID
        schema:
          type: integer
          example: 100000
        required: true
    get:
      tags:
        - Transactions
      summary: Get status of a transaction
      description: |-
        Gets the status of a transaction
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "404":
          description: Transaction not found
        "500":
          description: Error message
  /transactions/stop/{transactionID}:
    parameters:
      - in: path
        name: transactionID
        schema:
          type: integer
          example: 100000
        required: true
    put:
      tags:
        - Transactions
      summary: Stop a transaction
      description: |-
        Stops a transaction
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Error message
        "500":
          description: Error message
  /transactions/userTransactions/{userID}:
    parameters:
      - in: path
        name: userID
        schema:
          type: integer
        required: true
    get:
      tags:
        - Transactions
      summary: Transaction by userID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
  /transactions/chargerTransactions/{connectorID}:
    parameters:
      - in: path
        name: connectorID
        schema:
          type: integer
        required: true
    get:
      tags:
        - Transactions
      summary: Transaction by transactions
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
  /invoices:
    post:
      tags:
        - Invoices
      summary: Create invoice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userID: 1
                dateStart: 1
                dateEnd: 1
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /invoices/{invoiceId}:
    parameters:
      - in: path
        name: invoiceId
        schema:
          type: string
        required: true
    get:
      tags:
        - Invoices
      summary: Get invoice by ID.
      description: >-
        Will get the invoice requested by the parameter {invoiceID}.
        Currently there is only one particular PDF being and it
        belongs to Nisse Hult.


        **NOTE**: Using the "Execute" function in swagger is weird.
        Instead try this with "{baseuri:8080}/invoices/1234"


        *Future improvements*:

          1. Check that the user of this endpoint is authorized to look
          at the invoice. User X should not be able to read the invoice
          of user Y, but currently no verification is done.

          2. Code actually gets data from the database.
      parameters:
        - in: path
          name: invoiceID
          schema:
            type: integer
          required: true
          description: Numeric ID of the invoice to get.
      responses:
        "200":
          description: Successful response.
          content:
            application/pdf: {}
        "404":
          description: Invoice not found
          content:
            application/json: {}
  /invoices/users:
    get:
      security:
        - bearerAuth: []
      tags:
        - Invoices
      summary: Get a list of all users invoices
      description: Admin route to fetch all users invoices
      parameters:
        - in: query
          name: status
          schema:
            type: string
          required: false
          description: Filter invoices after status; paid, unpaid or all
        - in: query
          name: date
          schema:
            type: string
          required: false
          description: Filter invoices after date, format YYYY-MM
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
        "400":
          description: Bad request
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            application/json: {}
  /invoices/users/{userID}:
    parameters:
      - in: path
        name: userID
        schema:
          type: string
        required: true
    get:
      security:
        - bearerAuth: []
      tags:
        - Invoices
      summary: Get a list of invoices for a specific user
      description: Admin or the user to whom the invoices belongs to are authorized
      parameters:
        - in: path
          name: userID
          schema:
            type: string
          required: true
        - in: query
          name: status
          schema:
            type: string
          required: false
          description: Filter invoices after status; paid, unpaid or all
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
        "400":
          description: Bad request
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            application/json: {}
  /chargePoints:
    get:
      tags:
        - ChargePoints
      summary: Gets a list of all charge points
      responses:
        "200":
          description: Sucessful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChargePoint"
        "404":
          description: Not found
        "500":
          description: Internal server error
    post:
      tags:
        - ChargePoints
      summary: Crate a new charge point
      security:
        - bearerAuth: [] # admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: name
                location: [10, 10]
                price: 10
                klarnaReservationAmount: 10
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChargePoint"
        "400":
          description: Error message
        "500":
          description: Internal server error
  /chargePoints/{chargePointId}:
    parameters:
      - in: path
        name: chargePointId
        schema:
          type: number
        required: true
    get:
      tags:
        - ChargePoints
      summary: Gets a charging station based on idTag
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargePoint"
        "404":
          description: Not found
        "500":
          description: Internal server error
    put:
      tags:
        - ChargePoints
      summary: Update a charge point
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: name
                location: [10, 10]
                price: 10
      security:
        - bearerAuth: [] # admin
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargePoint"
        "400":
          description: Error message
        "404":
          description: Not found
        "500":
          description: Internal server error
    delete:
      tags:
        - ChargePoints
      summary: Delete charge point
      security:
        - bearerAuth: [] # admin
      responses:
        "204":
          description: Successful response
        "404":
          description: Not found
        "500":
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          example: "07XXXXXXXX"
        streetAddress:
          type: string
          example: SomeStreet 1
        zipCode:
          type: string
          example: 55555
        city:
          type: string
          example: "Jönköping"
        country:
          type: string
          example: Sweden
    Charger:
      type: object
      properties:
        connectorID:
          type: integer
          format: int64
          example: 100011
        location:
          type: array
          items:
            type: number
          example:
            - 57.777714
            - 14.16301
        serialNumber:
          type: string
          example: "testnumber15"
        chargePointID:
          type: integer
          format: int64
          example: 24
        status:
          type: string
          description: Charger status
          example: Available
          enum:
            - Available
            - Reserved
        pricePerKwh:
          type: number
          description: Price per kWh
          example: 0.41
      xml:
        name: charger
    ChargePoint:
      type: object
      properties:
        chargePointID:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: name
        location:
          type: array
          items:
            type: number
          example:
            - 57.777714
            - 14.16301
        price:
          type: string
          example: 20
        klarnaReservationAmount:
          type: number
          example: 400
    Transaction:
      type: object
      properties:
        transactionID:
          type: integer
          example: 9999
        isKlarnaPayment:
          type: boolean
          example: false
        kwhTransfered:
          type: number
          example: 50
        currentChargePercentage:
          type: number
          example: 79
        pricePerKwh:
          type: string
          example: "123.00"
        timestamp:
          type: integer
          example: 1663663253
        paymentID:
          type: string
          example: null
        userID:
          type: string
          example: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        session_id:
          type: string
          example: null
        klarna_consumer_token:
          type: string
          example: null
        paymentConfirmed:
          type: boolean
          example: null
        meterStart:
          type: integer
          example: 1
        connectorID:
          type: integer
          example: 100000
  responses:
    NotFound:
      description: >-
        **Not found**


        This error occures when the requested resource can't be found or don't exists.
    InternalError:
      description: >-
        **Internal error**


        Something wen't wrong on the server side.
    Unauthorized:
      description: >-
        **Unauthorized**


        This error occures when the route requires the sender to be signed in. To validate that the user is signed in, an ***accessToken*** is required in the headers.


        ``
          Authorization: Bearer <accessToken>
        ``
    Forbidden:
      description: >-
        **Forbidden**


        This error occures when the route requires either admin rights, or when the route contains information regarding a specific user that is not the same user that sent the request.
    BadRequest:
      description: "**Bad request**"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
